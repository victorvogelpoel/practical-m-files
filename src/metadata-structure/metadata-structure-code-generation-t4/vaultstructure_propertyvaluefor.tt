<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)\Interop.MFilesAPI.dll" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Threading" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="MFilesAPI" #>
<#@ output extension=".cs" #>
<#
    var cultureInfo = Thread.CurrentThread.CurrentCulture;
    var textInfo    = cultureInfo.TextInfo;

    var mfServerApplication = new MFilesServerApplication();

    var vaultID     = "{316EE0B8-8752-40CB-A03D-22B9F647B521}";
    var vaultServer = "localhost";
    var vaultPort   = "2266";

    // Connect to the practical-mfiles vault using the default authentication details,
    // specifying the server details.
    mfServerApplication.Connect(
        ProtocolSequence:   "ncacn_ip_tcp",
        NetworkAddress:     vaultServer,
        Endpoint:           vaultPort);

    var vault               = mfServerApplication.LogInToVault(vaultID);
    var vaultName           = vault.Name;
    var vaultVariablename   = textInfo.ToTitleCase(ConvertToVariableName(vaultName, "Vault"));

    // Retrieve vault structure
    //var propertyDefs        = vault.PropertyDefOperations.GetPropertyDefs().Cast<PropertyDef>();
    //var propertyDefsAdmin   = vault.PropertyDefOperations.GetPropertyDefsAdmin().Cast<PropertyDefAdmin>();
    var objectTypes         = vault.ObjectTypeOperations.GetObjectTypes().Cast<ObjType>();
    var classes             = vault.ClassOperations.GetAllObjectClasses().Cast<ObjectClass>();
    var classGroups         = vault.ClassGroupOperations.GetClassGroups(0).Cast<ClassGroup>().ToList(); // TODO: get class groups for all objectTypes

#>
using System;
using MFilesAPI;

// This M-Files vault structure file was generated at <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by a T4 Text Template that read the following vault:
// Vault name:   <#=vaultName#>
// Vault ID:     <#=vaultID#>
// Vault server: <#=vaultServer#>:<#=vaultPort#>
//
// If this works, it was generated by a T4 tool by Victor Vogelpoel (victor@victorvogelpoel.nl).
// If it doesn't, I don't know who wrote it.

namespace Dramatic.Conversational.MFilesAPI
{
	public static class PropertyValueFor
    {
        // --------------------------------------------------------------------------------------------------------------------------------------------------
        // Building blocks
        public static PropertyValue TextPropDef(MFBuiltInPropertyDef propDefID, string value) => TextPropDef((int)propDefID, value);
        public static PropertyValue TextPropDef(int propDefID, string value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValue(MFDataType.MFDatatypeText, value);
            return pv;
        }


        public static PropertyValue MultiLineTextPropDef(MFBuiltInPropertyDef propDefID, string value) => MultiLineTextPropDef((int)propDefID, value);
        public static PropertyValue MultiLineTextPropDef(int propDefID, string value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValue(MFDataType.MFDatatypeMultiLineText, value);
            return pv;
        }


        public static PropertyValue IntegerPropDef(MFBuiltInPropertyDef propDefID, int value) => IntegerPropDef((int)propDefID, value);
        public static PropertyValue IntegerPropDef(int propDefID, int value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValue(MFDataType.MFDatatypeInteger, value);
            return pv;
        }


        public static PropertyValue Integer64PropDef(MFBuiltInPropertyDef propDefID, Int64 value) => Integer64PropDef((int)propDefID, value);
        public static PropertyValue Integer64PropDef(int propDefID, Int64 value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValue(MFDataType.MFDatatypeInteger64, value);
            return pv;
        }


        public static PropertyValue BooleanPropDef(MFBuiltInPropertyDef propDefID, bool value) => BooleanPropDef((int)propDefID, value);
        public static PropertyValue BooleanPropDef(int propDefID, bool value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValue(MFDataType.MFDatatypeBoolean, value);
            return pv;
        }


        public static PropertyValue DatePropDef(MFBuiltInPropertyDef propDefID, DateTime value) => DatePropDef((int)propDefID, value);
        public static PropertyValue DatePropDef(int propDefID, DateTime value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValue(MFDataType.MFDatatypeDate, value);
            return pv;
        }

        public static PropertyValue TimePropDef(MFBuiltInPropertyDef propDefID, DateTime value) => TimePropDef((int)propDefID, value);
        public static PropertyValue TimePropDef(int propDefID, DateTime value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValue(MFDataType.MFDatatypeTime, value);
            return pv;
        }

        public static PropertyValue TimestampPropDef(MFBuiltInPropertyDef propDefID, DateTime value) => TimestampPropDef((int)propDefID, value);
        public static PropertyValue TimestampPropDef(int propDefID, DateTime value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValue(MFDataType.MFDatatypeTimestamp, value);
            return pv;

        }

        public static PropertyValue LookupPropDef(MFBuiltInPropertyDef propDefID, int value) => LookupPropDef((int)propDefID, value);
        public static PropertyValue LookupPropDef(int propDefID, int value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValue(MFDataType.MFDatatypeLookup, value);
            return pv;
        }

        public static PropertyValue LookupPropDef(int propDefID, Lookup value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValueToLookup(value);
            return pv;
        }

        public static PropertyValue MultiSelectLookupPropDef(MFBuiltInPropertyDef propDefID, Lookups value) => MultiSelectLookupPropDef((int)propDefID, value);
        public static PropertyValue MultiSelectLookupPropDef(int propDefID, Lookups value)
        {
            var pv = new PropertyValue { PropertyDef = propDefID };
            pv.TypedValue.SetValueToMultiSelectLookup(value);
            return pv;
        }

<#


        WriteLine(GeneratePropertyValueForCode(vault));

#>
    }
}

<#+

    public string GeneratePropertyValueForCode(Vault vault)
    {
        var propertyDefsAdmin   = vault.PropertyDefOperations.GetPropertyDefsAdmin().Cast<PropertyDefAdmin>();
        var code                = new StringBuilder();

        var allPropertyDefVariableNames     = propertyDefsAdmin.Select(pd => ConvertToVariableName($"PD{pd.PropertyDef.Name}")).ToList();

        foreach (var propertyDefAdmin in propertyDefsAdmin)
        {
            var propertyDef                 = propertyDefAdmin.PropertyDef;
            var shortDataTypeName           = propertyDefAdmin.PropertyDef.DataType.ToString().Substring(10);  // Remove "MFDataType" from eg "MFDataTypeText" -> "Text"
            var aliases                     = propertyDefAdmin.SemanticAliases.Value;
            var propertyDefVariableName     = ConvertToVariableName($"PD{propertyDef.Name}");
            var aliasesList                 = aliases.Split(';').Select(a => a.Trim()).Where(a => !String.IsNullOrWhiteSpace(a)).Distinct().ToList();

            var xmldoc  = $"        /// <summary>Construct a PropertyValue for \"{propertyDef.Name}\" (ID:{propertyDef.ID}), Type:{shortDataTypeName}, Aliases:{(String.IsNullOrWhiteSpace(aliases)?"(none)":$"\"{aliases}\"")}</summary>";

            // Test if the propertyDefVariableName exists more than once in the propDef list
            if (allPropertyDefVariableNames.Count(pd => pd == propertyDefVariableName) > 1)
            {
                // Aaii, the PropertyDef list contains duplicate names; try the alias
                var newpropertyDefVariableName = propertyDefVariableName;

                foreach (var alias in aliasesList)
                {
                    var aliasVariableName = ConvertToVariableName(alias);

                    if (allPropertyDefVariableNames.Any(pd => pd == aliasVariableName))
                    {
                        newpropertyDefVariableName = aliasVariableName;
                        break;
                    }
                }

                if (newpropertyDefVariableName == propertyDefVariableName)
                {
                    // Alias did not resolve to an new unique variable name.
                    // Now add the propDef ID to make the variable name unique.
                    newpropertyDefVariableName = $"{newpropertyDefVariableName}{propertyDef.ID}";
                }

                propertyDefVariableName = newpropertyDefVariableName;
            }

            var dotnettype  = "string";
            switch(propertyDefAdmin.PropertyDef.DataType)
            {
                case MFDataType.MFDatatypeUninitialized: dotnettype = "string"; break;
                case MFDataType.MFDatatypeText: dotnettype = "string"; break;
                case MFDataType.MFDatatypeInteger: dotnettype = "int"; break;
                case MFDataType.MFDatatypeFloating:dotnettype = "float"; break;
                case MFDataType.MFDatatypeDate:dotnettype = "DateTime"; break;
                case MFDataType.MFDatatypeTime:dotnettype = "DateTime"; break;
                case MFDataType.MFDatatypeTimestamp:dotnettype = "DateTime"; break;
                case MFDataType.MFDatatypeBoolean:dotnettype = "bool"; break;
                case MFDataType.MFDatatypeLookup:dotnettype = "Lookup"; break;
                case MFDataType.MFDatatypeMultiSelectLookup: dotnettype = "Lookups"; break;
                case MFDataType.MFDatatypeInteger64:dotnettype = "int64"; break;
                case MFDataType.MFDatatypeFILETIME: dotnettype = "DateTime"; break;
                case MFDataType.MFDatatypeMultiLineText:dotnettype = "string"; break;
                case MFDataType.MFDatatypeACL: break;
            }

            code.AppendLine(xmldoc);
            code.AppendLine($"        public static PropertyValue {propertyDefVariableName}({dotnettype} {ConvertToStartingLowerCase(propertyDefVariableName)}) => {shortDataTypeName}PropDef({propertyDef.ID}, {ConvertToStartingLowerCase(propertyDefVariableName)});");
            code.AppendLine();
        }

        return code.ToString();
    }


private string ConvertToVariableName(string vaultResourceName, string prefixWhenStartingWithDigit = "S" )
{
    if (string.IsNullOrWhiteSpace(vaultResourceName))
        return "";

    vaultResourceName = vaultResourceName.Normalize(NormalizationForm.FormD);
    var chars = vaultResourceName.Where(c => CharUnicodeInfo.GetUnicodeCategory(c) != UnicodeCategory.NonSpacingMark && Char.IsLetterOrDigit(c)).ToArray();
    vaultResourceName = new string(chars).Normalize(NormalizationForm.FormC);

    if (vaultResourceName.Length == 0)
    {
        throw new ArgumentException($"vault resource name \"{vaultResourceName}\" results in empty variableName.", nameof(vaultResourceName));
    }

    if (Char.IsDigit(vaultResourceName[0]))
    {
        vaultResourceName = prefixWhenStartingWithDigit + vaultResourceName;
    }

    return vaultResourceName;
}


/// <summary>
/// "PDSomeThing" -> "pdsomeThing"
/// </summary>
/// <param name="vaultResourceName"></param>
/// <returns></returns>
public string ConvertToStartingLowerCase(string vaultResourceName)
{
    if (String.IsNullOrEmpty(vaultResourceName)) { return ""; }

    var newString = new StringBuilder();

    for (int i=0; i<vaultResourceName.Length; i++)
    {
        if (Char.IsUpper(vaultResourceName[i]))
        {
            newString.Append(Char.ToLower(vaultResourceName[i]));
        }
        else
        {
            newString.Append(vaultResourceName.Substring(i));
            break;
        }
    }

    return newString.ToString();
}



#>
